For meetings in previous years, see "all meetings":all.html

h3. First Joint Meeting: Silicon Valley Agile + BayXP + Cupertino Agile

"Wednesday, October 22nd, 2008":http://www.meetup.com/silicon-valley-agile/calendar/8950820/

This meeting will be run as an Open Space. Each person should come with a topic they are interested in discussing. I will collect the topics, we'll vote on them and set the agenda for the rest of the evening.

Topic proposals can cover any subject related to Agile, but the best topics will relate to some real current problem or recent accomplishment. The scale of the proposed topics can vary. If we have a lot of small topics ("Any recommendations for testing my AJAX app?") then we'll cover more items than if we have larger ("How do you do your iteration planning?") or more controversial topics ("Is Scrum Evil?").

Meeting Notes:
* Scale matters: transitioning a large group requires significantly more planning & work than just doing one team.
* Related: remember The Law of Raspberry Jam (the wider you spread it the thinner it gets)
* It can take a lot of work to make sure a team self-organizes the right way
* The psychology of change is important

One of the books that came up: Cialdini's book on Influence which you can get in one of two flavors:
* "http://www.amazon.com/Influence-Psychology-Persuasion-Business-Essentials/dp/006124189":http://www.amazon.com/Influence-Psychology-Persuasion-Business-Essentials/dp/006124189
* "http://www.amazon.com/Influence-Practice-Robert-B-Cialdini/dp/0205609996/":http://www.amazon.com/Influence-Practice-Robert-B-Cialdini/dp/0205609996/


h3. TDD+RoR Lab Building a DotVoting System <a name="200809">&nbsp;</a>

September 24th, 2008 by "Philippe Hanrigou":../presenters/philippe_hanrigou.html

We are going to build a dot-voting system on RoR using Test-Driven Development. Please bring your laptop to the meeting.

Please note that people will save themselves time and headaches by bringing a non-windows laptop if they can ;-) RoR works better on Unix platforms (OS X, Linux, BSD, etc)

You should have the following program installed on your computer:

    * "Ruby":http://www.ruby-lang.org/en/
    * "Ruby on Rails":http://www.rubyonrails.org/
    * a Ruby IDE like "IntelliJ IDEA":http://www.jetbrains.com/idea/index.html with "Ruby Plugin":http://plugins.intellij.net/plugin/?id=1293, "Eclipse":http://www.eclipse.org/ with "RDT":http://rubyeclipse.sourceforge.net/, or "textmate":http://macromates.com/ on Mac.
    * "MySQL":http://www.mysql.com/
    * "Git":http://git.or.cz/


h3. Best practices and tools for web testing <a name="200808">&nbsp;</a>

August 27th, 2008 by "Philippe Hanrigou":../presenters/philippe_hanrigou.html

The purpose of this talk is to share my field experience in establishing web acceptance test suites with high return on investment (ROI) for web application. My ThoughtWorks team successfully transformed a 3 hours web testing suite that despite high maintenance efforts was always red, into a passing sub-20 minutes build that provides quick and accurate feedback while requiring minimal maintenance. This session covers best practices and tools that you can put in place to achieve your own success story.

In my experience, attaining high value from traditional acceptance web testing is hard to accomplish mainly because:
* Tests are brittle: In other words they keep failing and require a lot of maintenance over the course of the iterations -- even when your application has no new defects!
* Testing is slow: Web acceptance testing involves a full application stack and a flurry of network chats between browsers, web servers, databases and other processes. Not surprisingly this comes with a lot of performance overhead and the environment requires a non-trivial set up. Consequently a web acceptance build typically takes hours to run and accounts for a tremendous delay in development feedback.
* It is difficult to assess the exact impact of current failures in terms of actual application functionality: A single UI change in a "hub-page" (say the login page) can cause most of the test suite to fail while from the user's perspective, the application is working just fine.
* Some application states are hard, if not impossible, to reach solely from the UI. The traditional approach here has been either to avoid testing these cases or to write tests that rely on large, complex and well-known data sets, which become increasingly harder to maintain and comprehend.

I will discuss how to address these issues by leveraging tools such as Selenium Grid (http://openqa.org/selenium-grid), DeepTest (http://deep-test.rubyforge.org) while implementing innovative best practices such as:
* Keeping the build blazing fast by leveraging cheap hardware and aggressively parallelizing test runs.
* Implementing aggressive test isolation.
* Putting the Web acceptance tests in total control of the application state.
* Keeping the tests razor sharp.


h3. Agile approach in geographically distributed projects <a name="200807">&nbsp;</a>

July 30th, 2008 by "Dmytry Mykhaylov":../presenters/dmytry_mykhaylov.html

The presenter would share his experience about ~30 projects for ~10 companies which he has accomplished with different level of success but where remote (aka "off-shore") engineering resources been used. Similarities among projects, executive "patterns" and "anti-patterns" and "how agility may help" represent the core of the presentation.

h3. Pragmatic Unit Testing in C# 2nd edition

March 2008 by Matt Hargett

h3. ParaBuilder

January 2008 by Slava Imeshev

